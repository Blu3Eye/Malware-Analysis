import sys 
import re 

def decrypt_rsrc_file(data,key):
    data_bytes = bytearray(data)
    count = 0x3D0914
    while count != 0:
        buffer =[i for i in range(0x6B)]
        count-=1
    for i in range(len(data)):
        val = 0x19C * buffer[0] // 0x29D - 0x46D0 * buffer[0] * buffer[66]
        key_index = i + val - 26 * (i // len(key))
        key_index %= len(key)
        data_bytes[i] ^= key[key_index]
    return bytes(data_bytes)       

def find_key(data):
    prev_addr = None
    key_pattern = rb'\xC6\x45[\x00-\xFF](?P<group>[\x20-\x7E])'
    null_byte_pattern = re.compile(rb'\xC6.{2}\x00')

    for match in re.finditer(key_pattern,data):
        #start address of the match object found
        start_match_addr = match.start()
        key_char = match.group(1)
        stack_str_key = b''
        if prev_addr is None or prev_addr - start_match_addr == 4:
            #update previous address to the address of the current match start
            prev_addr = start_match_addr
            stack_str_key+=key_char
            null_byte_check = data[start_match_addr+4:start_match_addr+8]
            #check for null byte 
            if null_byte_pattern.match(null_byte_check)
                break
        elif:
            key = ''
            key+=key_char
            prev_addr = start_match_addr
    return key.decode('ascii')


if __name__ == '__main__':
    filepath = sys.argv[1]
    with open(filepath,'rb') as f:
        data = f.read()
        f.close()

    key_ascii = find_key(data)
    #check for null byte and add if not there
    if key_ascii[-1] != '\x00':
        key_ascii == key_ascii + '\x00'
    key_lst = [ord(_) for_ in key_ascii]
    decrypted_data = bytes()
    decrypted_data= decrypt_rsrc_file(data,key_lst)

    with open('ssload.bin','wb') as f:
        f.write('decrypted_data')
    
            