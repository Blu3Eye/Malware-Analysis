import re
import idaapi 
import idc 
import idautils 
import ida_kernwin

def read_bytes(start_ea,size):
    data = idaapi.get_bytes(start_ea,size)
    if data is None:
        print(f"Failed to read bytes at {hex(start_ea)}")
    return data

def decrypt_bytes(key,data,size):
    #encrypted data bytes buffer 
    enc_data_bytes = bytearray(data)
    buffer = [0] * 0x5F5E100
    #iterate through encrypted data bytes buffer to decrypt 
    for i in range(size):
        idx =  i + 665 * i * buffer[0]
        enc_data_bytes[idx] ^= key[i % len(key)]
    return bytes(enc_data_bytes)
        

def patch_bytes_in_idb(key,start_ea,size):
    # Read the encrypted data from the IDA database
    encrypted_data = read_bytes(start_ea,size)
    # Decrypt the data
    decrypted_data = decrypt_bytes(key,encrypted_data,size)
    # Write the decrypted data back to the IDA database
    idaapi.patch_bytes(start_ea,decrypted_data)

    
if __name__ == "__main__":
    #ask for the decryption key 
    key_ascii = ida_kernwin.ask_str("",0,"Enter the decryption key in ascii")
    if key_ascii:
        #check for NUL, add it if it was not there 
        if key_ascii[-1] != '\x00':
            key_ascii = key_ascii + '\x00'
        key_lst = [ord(_)for _ in key_ascii]
        # you need to position your cursor on the address of the encryped code block
        start_ea = ida_kernwin.get_screen_ea()
        size = ida_kernwin.ask_long(0,"Enter size value of encrypted stub")
        if size and start_ea:
            patch_bytes_in_idb(key_lst,start_ea,size)
            print("[+]Done patching")
        else:
            print("Failed to get size or start_ea")
            sys.exit(1)
    else:
        print("Please provide a decryption key")
        sys.exit(1)
    
  